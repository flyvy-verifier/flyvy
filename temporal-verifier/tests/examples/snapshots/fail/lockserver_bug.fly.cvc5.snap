---
source: temporal-verifier/tests/test_examples.rs
description: "--expect-fail --all-solvers -- verify tests/examples/fail/lockserver_bug.fly"
expression: combined_stdout_stderr
---

======== STDERR: ===========
verification errors:
error: invariant is not inductive
   ┌─ tests/examples/fail/lockserver_bug.fly:24:1
   │
24 │ assert always (forall N1:node, N2:node. holds_lock(N1) & holds_lock(N2) -> N1 = N2)
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = counter example:
     state 0:
     lock_msg(@node_0) = false
     lock_msg(@node_1) = false
     grant_msg(@node_0) = true
     grant_msg(@node_1) = true
     unlock_msg(@node_0) = true
     unlock_msg(@node_1) = true
     holds_lock(@node_0) = true
     holds_lock(@node_1) = false
     server_holds_lock = true
     
     state 1:
     lock_msg(@node_0) = false
     lock_msg(@node_1) = false
     grant_msg(@node_0) = true
     grant_msg(@node_1) = false
     unlock_msg(@node_0) = true
     unlock_msg(@node_1) = true
     holds_lock(@node_0) = true
     holds_lock(@node_1) = true
     server_holds_lock = true

error: invariant is not inductive
   ┌─ tests/examples/fail/lockserver_bug.fly:26:5
   │
26 │     invariant server_holds_lock
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = counter example:
     state 0:
     lock_msg(@node_0) = true
     grant_msg(@node_0) = true
     unlock_msg(@node_0) = true
     holds_lock(@node_0) = true
     server_holds_lock = true
     
     state 1:
     lock_msg(@node_0) = false
     grant_msg(@node_0) = true
     unlock_msg(@node_0) = true
     holds_lock(@node_0) = true
     server_holds_lock = false


