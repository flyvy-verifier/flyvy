# Copyright 2022-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause

## This file was generated from mypyvy.
##
## ./src/mypyvy.py typecheck --print-program=fly examples/fol/cache.pyv

# sorts:
sort address
sort core
sort value

# constants:


# functions:
mutable memory(address): value
mutable cache(core, address): value

# relations:
mutable modified(core, address): bool
mutable exclusive(core, address): bool
mutable shared(core, address): bool
mutable invalid(core, address): bool
mutable proc_read(core, address): bool
mutable proc_write(core, address, value): bool
mutable bus_in_use: bool
mutable bus_read(core, address): bool
mutable bus_read_for_ownership(core, address): bool
mutable bus_upgrade(core, address): bool
mutable bus_transfer(value): bool

# init:
assume (forall C:core, A:address. !modified(C, A)) & (forall C:core, A:address. !exclusive(C, A)) & (forall C:core, A:address. !shared(C, A)) & (forall C:core, A:address. invalid(C, A)) & (forall C:core, A:address. !proc_read(C, A)) & (forall C:core, A:address, V:value. !proc_write(C, A, V)) & (!bus_in_use) & (forall C:core, A:address. !bus_read(C, A)) & (forall C:core, A:address. !bus_read_for_ownership(C, A)) & (forall C:core, A:address. !bus_upgrade(C, A)) & (forall V:value. !bus_transfer(V))

# transitions:
assume always (exists c:core, a:address. invalid(c, a) & !bus_in_use & (bus_in_use)' & (forall C:core, A:address. (proc_read(C, A))' <-> proc_read(C, A) | C = c & A = a) & (forall C:core, A:address. (bus_read(C, A))' <-> bus_read(C, A) | C != c & A = a) & (forall x0:core, x1:address. (modified(x0, x1))' = modified(x0, x1)) & (forall x0:core, x1:address. (exclusive(x0, x1))' = exclusive(x0, x1)) & (forall x0:core, x1:address. (shared(x0, x1))' = shared(x0, x1)) & (forall x0:core, x1:address. (invalid(x0, x1))' = invalid(x0, x1)) & (forall x0:core, x1:address, x2:value. (proc_write(x0, x1, x2))' = proc_write(x0, x1, x2)) & (forall x0:core, x1:address. (bus_read_for_ownership(x0, x1))' = bus_read_for_ownership(x0, x1)) & (forall x0:core, x1:address. (bus_upgrade(x0, x1))' = bus_upgrade(x0, x1)) & (forall x0:value. (bus_transfer(x0))' = bus_transfer(x0)) & (forall x0:address. (memory(x0))' = memory(x0)) & (forall x0:core, x1:address. (cache(x0, x1))' = cache(x0, x1))) | (exists c:core, a:address. bus_read(c, a) & invalid(c, a) & (forall C:core, A:address. (bus_read(C, A))' <-> bus_read(C, A) & !(C = c & A = a)) & (forall x0:core, x1:address. (modified(x0, x1))' = modified(x0, x1)) & (forall x0:core, x1:address. (exclusive(x0, x1))' = exclusive(x0, x1)) & (forall x0:core, x1:address. (shared(x0, x1))' = shared(x0, x1)) & (forall x0:core, x1:address. (invalid(x0, x1))' = invalid(x0, x1)) & (forall x0:core, x1:address. (proc_read(x0, x1))' = proc_read(x0, x1)) & (forall x0:core, x1:address, x2:value. (proc_write(x0, x1, x2))' = proc_write(x0, x1, x2)) & (bus_in_use)' = bus_in_use & (forall x0:core, x1:address. (bus_read_for_ownership(x0, x1))' = bus_read_for_ownership(x0, x1)) & (forall x0:core, x1:address. (bus_upgrade(x0, x1))' = bus_upgrade(x0, x1)) & (forall x0:value. (bus_transfer(x0))' = bus_transfer(x0)) & (forall x0:address. (memory(x0))' = memory(x0)) & (forall x0:core, x1:address. (cache(x0, x1))' = cache(x0, x1))) | (exists c:core, a:address, v:value. bus_read(c, a) & !invalid(c, a) & cache(c, a) = v & (forall C:core, A:address. (bus_read(C, A))' <-> bus_read(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (shared(C, A))' <-> shared(C, A) | C = c & A = a) & (forall C:core, A:address. (modified(C, A))' <-> modified(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (exclusive(C, A))' <-> exclusive(C, A) & !(C = c & A = a)) & (modified(c, a) -> (forall A:address. A != a -> (memory(A))' = memory(A)) & (memory(a))' = v) & (!modified(c, a) -> (forall A:address. (memory(A))' = memory(A))) & (forall V:value. (bus_transfer(V))' <-> bus_transfer(V) | V = v) & (forall x0:core, x1:address. (invalid(x0, x1))' = invalid(x0, x1)) & (forall x0:core, x1:address. (proc_read(x0, x1))' = proc_read(x0, x1)) & (forall x0:core, x1:address, x2:value. (proc_write(x0, x1, x2))' = proc_write(x0, x1, x2)) & (bus_in_use)' = bus_in_use & (forall x0:core, x1:address. (bus_read_for_ownership(x0, x1))' = bus_read_for_ownership(x0, x1)) & (forall x0:core, x1:address. (bus_upgrade(x0, x1))' = bus_upgrade(x0, x1)) & (forall x0:core, x1:address. (cache(x0, x1))' = cache(x0, x1))) | (exists c:core, a:address, v:value. invalid(c, a) & proc_read(c, a) & bus_transfer(v) & (forall C:core, A:address. !bus_read(C, A)) & (forall V:value. !(bus_transfer(V))') & (forall C:core, A:address. (invalid(C, A))' <-> invalid(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (shared(C, A))' <-> shared(C, A) | C = c & A = a) & (forall C:core, A:address. !(C = c & A = a) -> (cache(C, A))' = cache(C, A)) & (cache(c, a))' = v & !(bus_in_use)' & (forall C:core, A:address. (proc_read(C, A))' <-> proc_read(C, A) & !(C = c & A = a)) & (forall x0:core, x1:address. (modified(x0, x1))' = modified(x0, x1)) & (forall x0:core, x1:address. (exclusive(x0, x1))' = exclusive(x0, x1)) & (forall x0:core, x1:address, x2:value. (proc_write(x0, x1, x2))' = proc_write(x0, x1, x2)) & (forall x0:core, x1:address. (bus_read(x0, x1))' = bus_read(x0, x1)) & (forall x0:core, x1:address. (bus_read_for_ownership(x0, x1))' = bus_read_for_ownership(x0, x1)) & (forall x0:core, x1:address. (bus_upgrade(x0, x1))' = bus_upgrade(x0, x1)) & (forall x0:address. (memory(x0))' = memory(x0))) | (exists c:core, a:address, v:value. invalid(c, a) & proc_read(c, a) & (forall V:value. !bus_transfer(V)) & (forall C:core, A:address. !bus_read(C, A)) & memory(a) = v & (forall C:core, A:address. (invalid(C, A))' <-> invalid(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (exclusive(C, A))' <-> exclusive(C, A) | C = c & A = a) & (forall C:core, A:address. !(C = c & A = a) -> (cache(C, A))' = cache(C, A)) & (cache(c, a))' = v & !(bus_in_use)' & (forall C:core, A:address. (proc_read(C, A))' <-> proc_read(C, A) & !(C = c & A = a)) & (forall x0:core, x1:address. (modified(x0, x1))' = modified(x0, x1)) & (forall x0:core, x1:address. (shared(x0, x1))' = shared(x0, x1)) & (forall x0:core, x1:address, x2:value. (proc_write(x0, x1, x2))' = proc_write(x0, x1, x2)) & (forall x0:core, x1:address. (bus_read(x0, x1))' = bus_read(x0, x1)) & (forall x0:core, x1:address. (bus_read_for_ownership(x0, x1))' = bus_read_for_ownership(x0, x1)) & (forall x0:core, x1:address. (bus_upgrade(x0, x1))' = bus_upgrade(x0, x1)) & (forall x0:value. (bus_transfer(x0))' = bus_transfer(x0)) & (forall x0:address. (memory(x0))' = memory(x0))) | (exists c:core, a:address, v:value. invalid(c, a) & !bus_in_use & (bus_in_use)' & (forall C:core, A:address, V:value. (proc_write(C, A, V))' <-> proc_write(C, A, V) | C = c & A = a & V = v) & (forall C:core, A:address. (bus_read_for_ownership(C, A))' <-> bus_read_for_ownership(C, A) | C != c & A = a) & (forall x0:core, x1:address. (modified(x0, x1))' = modified(x0, x1)) & (forall x0:core, x1:address. (exclusive(x0, x1))' = exclusive(x0, x1)) & (forall x0:core, x1:address. (shared(x0, x1))' = shared(x0, x1)) & (forall x0:core, x1:address. (invalid(x0, x1))' = invalid(x0, x1)) & (forall x0:core, x1:address. (proc_read(x0, x1))' = proc_read(x0, x1)) & (forall x0:core, x1:address. (bus_read(x0, x1))' = bus_read(x0, x1)) & (forall x0:core, x1:address. (bus_upgrade(x0, x1))' = bus_upgrade(x0, x1)) & (forall x0:value. (bus_transfer(x0))' = bus_transfer(x0)) & (forall x0:address. (memory(x0))' = memory(x0)) & (forall x0:core, x1:address. (cache(x0, x1))' = cache(x0, x1))) | (exists c:core, a:address. bus_read_for_ownership(c, a) & invalid(c, a) & (forall C:core, A:address. (bus_read_for_ownership(C, A))' <-> bus_read_for_ownership(C, A) & !(C = c & A = a)) & (forall x0:core, x1:address. (modified(x0, x1))' = modified(x0, x1)) & (forall x0:core, x1:address. (exclusive(x0, x1))' = exclusive(x0, x1)) & (forall x0:core, x1:address. (shared(x0, x1))' = shared(x0, x1)) & (forall x0:core, x1:address. (invalid(x0, x1))' = invalid(x0, x1)) & (forall x0:core, x1:address. (proc_read(x0, x1))' = proc_read(x0, x1)) & (forall x0:core, x1:address, x2:value. (proc_write(x0, x1, x2))' = proc_write(x0, x1, x2)) & (bus_in_use)' = bus_in_use & (forall x0:core, x1:address. (bus_read(x0, x1))' = bus_read(x0, x1)) & (forall x0:core, x1:address. (bus_upgrade(x0, x1))' = bus_upgrade(x0, x1)) & (forall x0:value. (bus_transfer(x0))' = bus_transfer(x0)) & (forall x0:address. (memory(x0))' = memory(x0)) & (forall x0:core, x1:address. (cache(x0, x1))' = cache(x0, x1))) | (exists c:core, a:address, v:value. bus_read_for_ownership(c, a) & !invalid(c, a) & cache(c, a) = v & (forall C:core, A:address. (bus_read_for_ownership(C, A))' <-> bus_read_for_ownership(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (invalid(C, A))' <-> invalid(C, A) | C = c & A = a) & (forall C:core, A:address. (shared(C, A))' <-> shared(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (modified(C, A))' <-> modified(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (exclusive(C, A))' <-> exclusive(C, A) & !(C = c & A = a)) & (modified(c, a) -> (forall A:address. A != a -> (memory(A))' = memory(A)) & (memory(a))' = v) & (!modified(c, a) -> (forall A:address. (memory(A))' = memory(A))) & (forall V:value. (bus_transfer(V))' <-> bus_transfer(V) | V = v) & (forall x0:core, x1:address. (proc_read(x0, x1))' = proc_read(x0, x1)) & (forall x0:core, x1:address, x2:value. (proc_write(x0, x1, x2))' = proc_write(x0, x1, x2)) & (bus_in_use)' = bus_in_use & (forall x0:core, x1:address. (bus_read(x0, x1))' = bus_read(x0, x1)) & (forall x0:core, x1:address. (bus_upgrade(x0, x1))' = bus_upgrade(x0, x1)) & (forall x0:core, x1:address. (cache(x0, x1))' = cache(x0, x1))) | (exists c:core, a:address, v:value. invalid(c, a) & proc_write(c, a, v) & (forall C:core, A:address. !bus_read_for_ownership(C, A)) & (forall V:value. !(bus_transfer(V))') & (forall C:core, A:address. (invalid(C, A))' <-> invalid(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (modified(C, A))' <-> modified(C, A) | C = c & A = a) & (forall C:core, A:address. !(C = c & A = a) -> (cache(C, A))' = cache(C, A)) & (cache(c, a))' = v & !(bus_in_use)' & (forall C:core, A:address, V:value. (proc_write(C, A, V))' <-> proc_write(C, A, V) & !(C = c & A = a & V = v)) & (forall x0:core, x1:address. (exclusive(x0, x1))' = exclusive(x0, x1)) & (forall x0:core, x1:address. (shared(x0, x1))' = shared(x0, x1)) & (forall x0:core, x1:address. (proc_read(x0, x1))' = proc_read(x0, x1)) & (forall x0:core, x1:address. (bus_read(x0, x1))' = bus_read(x0, x1)) & (forall x0:core, x1:address. (bus_read_for_ownership(x0, x1))' = bus_read_for_ownership(x0, x1)) & (forall x0:core, x1:address. (bus_upgrade(x0, x1))' = bus_upgrade(x0, x1)) & (forall x0:address. (memory(x0))' = memory(x0))) | (exists c:core, a:address, v:value. exclusive(c, a) & !bus_in_use & (forall C:core, A:address. (exclusive(C, A))' <-> exclusive(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (modified(C, A))' <-> modified(C, A) | C = c & A = a) & (forall C:core, A:address. !(C = c & A = a) -> (cache(C, A))' = cache(C, A)) & (cache(c, a))' = v & (forall x0:core, x1:address. (shared(x0, x1))' = shared(x0, x1)) & (forall x0:core, x1:address. (invalid(x0, x1))' = invalid(x0, x1)) & (forall x0:core, x1:address. (proc_read(x0, x1))' = proc_read(x0, x1)) & (forall x0:core, x1:address, x2:value. (proc_write(x0, x1, x2))' = proc_write(x0, x1, x2)) & (bus_in_use)' = bus_in_use & (forall x0:core, x1:address. (bus_read(x0, x1))' = bus_read(x0, x1)) & (forall x0:core, x1:address. (bus_read_for_ownership(x0, x1))' = bus_read_for_ownership(x0, x1)) & (forall x0:core, x1:address. (bus_upgrade(x0, x1))' = bus_upgrade(x0, x1)) & (forall x0:value. (bus_transfer(x0))' = bus_transfer(x0)) & (forall x0:address. (memory(x0))' = memory(x0))) | (exists c:core, a:address, v:value. shared(c, a) & !bus_in_use & (bus_in_use)' & (forall C:core, A:address, V:value. (proc_write(C, A, V))' <-> proc_write(C, A, V) | C = c & A = a & V = v) & (forall C:core, A:address. (bus_upgrade(C, A))' <-> bus_upgrade(C, A) | C != c & A = a) & (forall x0:core, x1:address. (modified(x0, x1))' = modified(x0, x1)) & (forall x0:core, x1:address. (exclusive(x0, x1))' = exclusive(x0, x1)) & (forall x0:core, x1:address. (shared(x0, x1))' = shared(x0, x1)) & (forall x0:core, x1:address. (invalid(x0, x1))' = invalid(x0, x1)) & (forall x0:core, x1:address. (proc_read(x0, x1))' = proc_read(x0, x1)) & (forall x0:core, x1:address. (bus_read(x0, x1))' = bus_read(x0, x1)) & (forall x0:core, x1:address. (bus_read_for_ownership(x0, x1))' = bus_read_for_ownership(x0, x1)) & (forall x0:value. (bus_transfer(x0))' = bus_transfer(x0)) & (forall x0:address. (memory(x0))' = memory(x0)) & (forall x0:core, x1:address. (cache(x0, x1))' = cache(x0, x1))) | (exists c:core, a:address. bus_upgrade(c, a) & (forall C:core, A:address. (bus_upgrade(C, A))' <-> bus_upgrade(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (invalid(C, A))' <-> invalid(C, A) | C = c & A = a) & (forall C:core, A:address. (shared(C, A))' <-> shared(C, A) & !(C = c & A = a)) & (forall x0:core, x1:address. (modified(x0, x1))' = modified(x0, x1)) & (forall x0:core, x1:address. (exclusive(x0, x1))' = exclusive(x0, x1)) & (forall x0:core, x1:address. (proc_read(x0, x1))' = proc_read(x0, x1)) & (forall x0:core, x1:address, x2:value. (proc_write(x0, x1, x2))' = proc_write(x0, x1, x2)) & (bus_in_use)' = bus_in_use & (forall x0:core, x1:address. (bus_read(x0, x1))' = bus_read(x0, x1)) & (forall x0:core, x1:address. (bus_read_for_ownership(x0, x1))' = bus_read_for_ownership(x0, x1)) & (forall x0:value. (bus_transfer(x0))' = bus_transfer(x0)) & (forall x0:address. (memory(x0))' = memory(x0)) & (forall x0:core, x1:address. (cache(x0, x1))' = cache(x0, x1))) | (exists c:core, a:address, v:value. shared(c, a) & proc_write(c, a, v) & (forall C:core, A:address. !bus_upgrade(C, A)) & (forall C:core, A:address. (shared(C, A))' <-> shared(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (modified(C, A))' <-> modified(C, A) | C = c & A = a) & (forall C:core, A:address. !(C = c & A = a) -> (cache(C, A))' = cache(C, A)) & (cache(c, a))' = v & (forall C:core, A:address, V:value. (proc_write(C, A, V))' <-> proc_write(C, A, V) & !(C = c & A = a & V = v)) & !(bus_in_use)' & (forall x0:core, x1:address. (exclusive(x0, x1))' = exclusive(x0, x1)) & (forall x0:core, x1:address. (invalid(x0, x1))' = invalid(x0, x1)) & (forall x0:core, x1:address. (proc_read(x0, x1))' = proc_read(x0, x1)) & (forall x0:core, x1:address. (bus_read(x0, x1))' = bus_read(x0, x1)) & (forall x0:core, x1:address. (bus_read_for_ownership(x0, x1))' = bus_read_for_ownership(x0, x1)) & (forall x0:core, x1:address. (bus_upgrade(x0, x1))' = bus_upgrade(x0, x1)) & (forall x0:value. (bus_transfer(x0))' = bus_transfer(x0)) & (forall x0:address. (memory(x0))' = memory(x0))) | (exists c:core, a:address. !bus_in_use & modified(c, a) & (forall A:address. A != a -> (memory(A))' = memory(A)) & (memory(a))' = cache(c, a) & (forall C:core, A:address. (modified(C, A))' <-> modified(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (invalid(C, A))' <-> invalid(C, A) | C = c & A = a) & (forall x0:core, x1:address. (exclusive(x0, x1))' = exclusive(x0, x1)) & (forall x0:core, x1:address. (shared(x0, x1))' = shared(x0, x1)) & (forall x0:core, x1:address. (proc_read(x0, x1))' = proc_read(x0, x1)) & (forall x0:core, x1:address, x2:value. (proc_write(x0, x1, x2))' = proc_write(x0, x1, x2)) & (bus_in_use)' = bus_in_use & (forall x0:core, x1:address. (bus_read(x0, x1))' = bus_read(x0, x1)) & (forall x0:core, x1:address. (bus_read_for_ownership(x0, x1))' = bus_read_for_ownership(x0, x1)) & (forall x0:core, x1:address. (bus_upgrade(x0, x1))' = bus_upgrade(x0, x1)) & (forall x0:value. (bus_transfer(x0))' = bus_transfer(x0)) & (forall x0:core, x1:address. (cache(x0, x1))' = cache(x0, x1))) | (exists c:core, a:address. !bus_in_use & (exclusive(c, a) | shared(c, a)) & (forall C:core, A:address. (exclusive(C, A))' <-> exclusive(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (shared(C, A))' <-> shared(C, A) & !(C = c & A = a)) & (forall C:core, A:address. (invalid(C, A))' <-> invalid(C, A) | C = c & A = a) & (forall x0:core, x1:address. (modified(x0, x1))' = modified(x0, x1)) & (forall x0:core, x1:address. (proc_read(x0, x1))' = proc_read(x0, x1)) & (forall x0:core, x1:address, x2:value. (proc_write(x0, x1, x2))' = proc_write(x0, x1, x2)) & (bus_in_use)' = bus_in_use & (forall x0:core, x1:address. (bus_read(x0, x1))' = bus_read(x0, x1)) & (forall x0:core, x1:address. (bus_read_for_ownership(x0, x1))' = bus_read_for_ownership(x0, x1)) & (forall x0:core, x1:address. (bus_upgrade(x0, x1))' = bus_upgrade(x0, x1)) & (forall x0:value. (bus_transfer(x0))' = bus_transfer(x0)) & (forall x0:address. (memory(x0))' = memory(x0)) & (forall x0:core, x1:address. (cache(x0, x1))' = cache(x0, x1)))

# safety:
assert always (forall C:core, A:address. !invalid(C, A) & !modified(C, A) -> cache(C, A) = memory(A))
proof {
    invariant forall C:core, A:address. !invalid(C, A) & !modified(C, A) -> cache(C, A) = memory(A)
    invariant forall C:core, A:address. !(invalid(C, A) & modified(C, A))
    invariant forall C:core, A:address. !(invalid(C, A) & exclusive(C, A))
    invariant forall C:core, A:address. !(invalid(C, A) & shared(C, A))
    invariant forall C:core, A:address. !(modified(C, A) & exclusive(C, A))
    invariant forall C:core, A:address. !(modified(C, A) & shared(C, A))
    invariant forall C:core, A:address. !(exclusive(C, A) & shared(C, A))
    invariant forall C1:core, A:address, C2:core. exclusive(C1, A) & C1 != C2 -> invalid(C2, A)
    invariant forall C1:core, A:address, C2:core. modified(C1, A) & C1 != C2 -> invalid(C2, A)
    invariant forall C:core, A:address. bus_read(C, A) -> bus_in_use
    invariant forall C:core, A:address. bus_read_for_ownership(C, A) -> bus_in_use
    invariant forall C:core, A:address. bus_upgrade(C, A) -> bus_in_use
    invariant forall V:value. bus_transfer(V) -> bus_in_use
    invariant forall C:core, A:address. proc_read(C, A) -> bus_in_use
    invariant forall C:core, A:address, V:value. proc_write(C, A, V) -> bus_in_use
    invariant forall C1:core, A:address, V:value, C2:core. proc_write(C1, A, V) & bus_read_for_ownership(C2, A) -> invalid(C1, A)
    invariant forall C1:core, A:address, V:value, C2:core. proc_write(C1, A, V) & bus_upgrade(C2, A) -> shared(C1, A)
    invariant forall C:core, A:address, V:value. !(proc_write(C, A, V) & bus_upgrade(C, A))
    invariant forall C:core, A:address, V1:value, V2:value. proc_write(C, A, V1) & shared(C, A) -> !bus_transfer(V2)
    invariant forall C1:core, A1:address, C2:core, A2:address. proc_read(C1, A1) & proc_read(C2, A2) -> C1 = C2 & A1 = A2
    invariant forall C1:core, A1:address, V1:value, C2:core, A2:address, V2:value. proc_write(C1, A1, V1) & proc_write(C2, A2, V2) -> C1 = C2 & A1 = A2 & V1 = V2
    invariant forall C1:core, A1:address, C2:core, A2:address, V:value. !(proc_read(C1, A1) & proc_write(C2, A2, V))
    invariant forall C1:core, A1:address, C2:core, A2:address. !(proc_read(C1, A1) & bus_read_for_ownership(C2, A2))
    invariant forall C1:core, A1:address, C2:core, A2:address. !(proc_read(C1, A1) & bus_upgrade(C2, A2))
    invariant forall C1:core, A1:address, V:value, C2:core, A2:address. !(proc_write(C1, A1, V) & bus_read(C2, A2))
    invariant forall C1:core, A1:address, C2:core, A2:address. proc_read(C1, A1) & bus_read(C2, A2) -> A1 = A2
    invariant forall C1:core, A1:address, V:value, C2:core, A2:address. proc_write(C1, A1, V) & bus_read_for_ownership(C2, A2) -> A1 = A2
    invariant forall C1:core, A1:address, V:value, C2:core, A2:address. proc_write(C1, A1, V) & bus_upgrade(C2, A2) -> A1 = A2
    invariant forall C1:core, A:address, C2:core. proc_read(C1, A) & !bus_read(C2, A) & C1 != C2 -> shared(C2, A) | invalid(C2, A)
    invariant forall C1:core, A:address, C2:core. proc_read(C1, A) & !bus_read(C2, A) & C1 != C2 & shared(C2, A) -> bus_transfer(cache(C2, A))
    invariant forall C:core, A:address, V:value. proc_read(C, A) & bus_transfer(V) -> memory(A) = V
    invariant forall C1:core, A:address, V:value, C2:core. proc_read(C1, A) & bus_transfer(V) & !invalid(C2, A) -> cache(C2, A) = V
    invariant forall C1:core, A:address, V:value, C2:core. proc_write(C1, A, V) & invalid(C1, A) & !bus_read_for_ownership(C2, A) & C1 != C2 -> invalid(C2, A)
    invariant forall C1:core, A:address, V:value, C2:core. proc_write(C1, A, V) & shared(C1, A) & !bus_upgrade(C2, A) & C1 != C2 -> invalid(C2, A)
    invariant forall V:value, C1:core, A:address, C2:core, V2:value. !(bus_transfer(V) & modified(C1, A) & (proc_read(C2, A) | proc_write(C2, A, V2)))
    invariant forall C1:core, A:address, C2:core. !(bus_upgrade(C1, A) & exclusive(C2, A))
    invariant forall C1:core, A:address, C2:core. !(bus_upgrade(C1, A) & modified(C2, A))
}
