# Copyright 2022-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause

## This file was generated from mypyvy.
##
## ./src/mypyvy.py typecheck --print-program=fly examples/fol/ring_id.pyv

# sorts:
sort node
sort id

# constants:


# functions:
immutable idn(node): id

# relations:
immutable le(id, id): bool
immutable btw(node, node, node): bool
mutable leader(node): bool
mutable pending(id, node): bool

# axioms:
assume always (forall X:id. le(X, X)) & (forall X:id, Y:id, Z:id. le(X, Y) & le(Y, Z) -> le(X, Z)) & (forall X:id, Y:id. le(X, Y) & le(Y, X) -> X = Y) & (forall X:id, Y:id. le(X, Y) | le(Y, X)) & (forall W:node, X:node, Y:node, Z:node. btw(W, X, Y) & btw(W, Y, Z) -> btw(W, X, Z)) & (forall W:node, X:node, Y:node. btw(W, X, Y) -> !btw(W, Y, X)) & (forall W:node, X:node, Y:node. btw(W, X, Y) | btw(W, Y, X) | W = X | W = Y | X = Y) & (forall X:node, Y:node, Z:node. btw(X, Y, Z) -> btw(Y, Z, X)) & (forall X:node, Y:node. idn(X) = idn(Y) -> X = Y)

# init:
assume (forall N:node. !leader(N)) & (forall V:id, N:node. !pending(V, N))

# transitions:
assume always (exists n:node, next:node. (forall Z:node. Z != n & Z != next -> btw(n, next, Z)) & (forall V:id, N:node. (pending(V, N))' <-> pending(V, N) | V = idn(n) & N = next) & (forall x0:node. (leader(x0))' = leader(x0))) | (exists v:id, n:node, next:node. (forall Z:node. Z != n & Z != next -> btw(n, next, Z)) & pending(v, n) & (if v = idn(n) then (forall N:node. (leader(N))' <-> leader(N) | N = n) & (forall V:id, N:node. !(V = v & N = n) -> ((pending(V, N))' <-> pending(V, N))) else (forall N:node. (leader(N))' <-> leader(N)) & (if le(idn(n), v) then forall V:id, N:node. !(V = v & N = n) -> ((pending(V, N))' <-> pending(V, N) | V = v & N = next) else forall V:id, N:node. !(V = v & N = n) -> ((pending(V, N))' <-> pending(V, N)))))

# safety:
assert always (forall X:node, Y:node. leader(X) & leader(Y) -> X = Y)
proof {
    invariant forall X:node, Y:node. leader(X) & leader(Y) -> X = Y
    invariant forall L:node, N:node. leader(L) -> le(idn(N), idn(L))
    invariant forall L:node, N:node. pending(idn(L), L) -> le(idn(N), idn(L))
    invariant forall S:node, D:node, N:node. pending(idn(S), D) & btw(S, N, D) -> le(idn(N), idn(S))
}
