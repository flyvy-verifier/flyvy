# Copyright 2022-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause

## This file was generated from mypyvy.
##
## ./src/mypyvy.py typecheck --print-program=fly examples/fol/consensus_wo_decide.pyv
##
## Manually added "always" to axiom.

# sorts:
sort quorum
sort node

# constants:
mutable voting_quorum: quorum

# functions:


# relations:
immutable member(node, quorum): bool
mutable vote_request_msg(node, node): bool
mutable voted(node): bool
mutable vote_msg(node, node): bool
mutable votes(node, node): bool
mutable leader(node): bool

# axioms:
assume always (forall Q1:quorum, Q2:quorum. exists N:node. member(N, Q1) & member(N, Q2))

# init:
assume (forall N1:node, N2:node. !vote_request_msg(N1, N2)) & (forall N:node. !voted(N)) & (forall N1:node, N2:node. !vote_msg(N1, N2)) & (forall N1:node, N2:node. !votes(N1, N2)) & (forall N1:node. !leader(N1))

# transitions:
assume always (exists src:node, dst:node. (forall N1:node, N2:node. (vote_request_msg(N1, N2))' <-> vote_request_msg(N1, N2) | N1 = src & N2 = dst) & (forall x0:node. (voted(x0))' = voted(x0)) & (forall x0:node, x1:node. (vote_msg(x0, x1))' = vote_msg(x0, x1)) & (forall x0:node, x1:node. (votes(x0, x1))' = votes(x0, x1)) & (forall x0:node. (leader(x0))' = leader(x0)) & (voting_quorum)' = voting_quorum) | (exists src:node, dst:node. (forall N1:node, N2:node, N:node. !voted(src) & vote_request_msg(dst, src) & ((vote_msg(N1, N2))' <-> vote_msg(N1, N2) | N1 = src & N2 = dst) & ((voted(N))' <-> voted(N) | N = src) & (!(N1 = dst & N2 = src) -> ((vote_request_msg(N1, N2))' <-> vote_request_msg(N1, N2)))) & (forall x0:node, x1:node. (votes(x0, x1))' = votes(x0, x1)) & (forall x0:node. (leader(x0))' = leader(x0)) & (voting_quorum)' = voting_quorum) | (exists n:node, sender:node. (forall N1:node, N2:node. vote_msg(sender, n) & ((votes(N1, N2))' <-> votes(N1, N2) | N1 = n & N2 = sender)) & (forall x0:node, x1:node. (vote_request_msg(x0, x1))' = vote_request_msg(x0, x1)) & (forall x0:node. (voted(x0))' = voted(x0)) & (forall x0:node, x1:node. (vote_msg(x0, x1))' = vote_msg(x0, x1)) & (forall x0:node. (leader(x0))' = leader(x0)) & (voting_quorum)' = voting_quorum) | (exists q:quorum, sn:node. (forall N:node. member(N, q) -> votes(sn, N)) & (voting_quorum)' = q & (forall x0:node, x1:node. (vote_request_msg(x0, x1))' = vote_request_msg(x0, x1)) & (forall x0:node. (voted(x0))' = voted(x0)) & (forall x0:node, x1:node. (vote_msg(x0, x1))' = vote_msg(x0, x1)) & (forall x0:node, x1:node. (votes(x0, x1))' = votes(x0, x1)) & (forall x0:node. (leader(x0))' = leader(x0))) | (exists n:node. (forall N:node. (member(N, voting_quorum) -> votes(n, N)) & ((leader(N))' <-> leader(N) | N = n)) & (forall x0:node, x1:node. (vote_request_msg(x0, x1))' = vote_request_msg(x0, x1)) & (forall x0:node. (voted(x0))' = voted(x0)) & (forall x0:node, x1:node. (vote_msg(x0, x1))' = vote_msg(x0, x1)) & (forall x0:node, x1:node. (votes(x0, x1))' = votes(x0, x1)) & (voting_quorum)' = voting_quorum)

# safety:
assert always (forall N1:node, N2:node. leader(N1) & leader(N2) -> N1 = N2)
proof {
    invariant forall N1:node, N2:node. leader(N1) & leader(N2) -> N1 = N2
    invariant forall N:node, N1:node. votes(N, N1) -> vote_msg(N1, N)
    invariant forall N:node, N1:node, N2:node. vote_msg(N, N1) & vote_msg(N, N2) -> N1 = N2
    invariant forall N:node, N1:node. vote_msg(N, N1) -> voted(N)
    invariant forall N:node, N1:node. leader(N) & member(N1, voting_quorum) -> votes(N, N1)
}
