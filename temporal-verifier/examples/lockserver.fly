# Copyright 2022-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause

# Lock server example, translated from mypyvy
# TEST --all-solvers -- verify
# TEST --name infer-z3 -- infer --no-print-invariant qalpha --until-safe --max-exist 1 --sort node --bound node=3 --cubes 3 --cube-size 3 --non-unit 3
# TEST --name infer-cvc5 -- infer --no-print-invariant qalpha --solver cvc5 --until-safe --max-exist 1 --bound node=3 --cubes 3 --cube-size 3 --non-unit 3

sort node

mutable lock_msg(node): bool
mutable grant_msg(node): bool
mutable unlock_msg(node): bool
mutable holds_lock(node): bool
mutable server_holds_lock: bool

# inits:
assume (forall N:node. !lock_msg(N)) & (forall N:node. !grant_msg(N)) & (forall N:node. !unlock_msg(N)) & (forall N:node. !holds_lock(N)) & (server_holds_lock)

# transitions:
assume always (exists n:node. (forall N:node. ((lock_msg(N))') <-> lock_msg(N) | N = n) & (forall x0:node. ((grant_msg(x0))') = grant_msg(x0)) & (forall x0:node. ((unlock_msg(x0))') = unlock_msg(x0)) & (forall x0:node. ((holds_lock(x0))') = holds_lock(x0)) & ((server_holds_lock)') = server_holds_lock) | (exists n:node. (forall N:node. server_holds_lock & lock_msg(n) & !((server_holds_lock)') & (((lock_msg(N))') <-> lock_msg(N) & N != n) & (((grant_msg(N))') <-> grant_msg(N) | N = n)) & (forall x0:node. ((unlock_msg(x0))') = unlock_msg(x0)) & (forall x0:node. ((holds_lock(x0))') = holds_lock(x0))) | (exists n:node. (forall N:node. grant_msg(n) & (((grant_msg(N))') <-> grant_msg(N) & N != n) & (((holds_lock(N))') <-> holds_lock(N) | N = n)) & (forall x0:node. ((lock_msg(x0))') = lock_msg(x0)) & (forall x0:node. ((unlock_msg(x0))') = unlock_msg(x0)) & ((server_holds_lock)') = server_holds_lock) | (exists n:node. (forall N:node. holds_lock(n) & (((holds_lock(N))') <-> holds_lock(N) & N != n) & (((unlock_msg(N))') <-> unlock_msg(N) | N = n)) & (forall x0:node. ((lock_msg(x0))') = lock_msg(x0)) & (forall x0:node. ((grant_msg(x0))') = grant_msg(x0)) & ((server_holds_lock)') = server_holds_lock) | (exists n:node. (forall N:node. unlock_msg(n) & (((unlock_msg(N))') <-> unlock_msg(N) & N != n) & ((server_holds_lock)')) & (forall x0:node. ((lock_msg(x0))') = lock_msg(x0)) & (forall x0:node. ((grant_msg(x0))') = grant_msg(x0)) & (forall x0:node. ((holds_lock(x0))') = holds_lock(x0)))

# safety:
assert always (forall N1:node, N2:node. holds_lock(N1) & holds_lock(N2) -> N1 = N2)
proof {
    invariant forall N1:node, N2:node. holds_lock(N1) & holds_lock(N2) -> N1 = N2
    invariant forall N1:node, N2:node. grant_msg(N1) & grant_msg(N2) -> N1 = N2
    invariant forall N1:node, N2:node. unlock_msg(N1) & unlock_msg(N2) -> N1 = N2
    invariant forall N1:node, N2:node. !(holds_lock(N1) & grant_msg(N2))
    invariant forall N1:node, N2:node. !(holds_lock(N1) & unlock_msg(N2))
    invariant forall N1:node, N2:node. !(grant_msg(N1) & unlock_msg(N2))
    invariant forall N:node. !(grant_msg(N) & server_holds_lock)
    invariant forall N:node. !(holds_lock(N) & server_holds_lock)
    invariant forall N:node. !(unlock_msg(N) & server_holds_lock)
}
