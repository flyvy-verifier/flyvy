# Copyright 2022-2023 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause

## This file was generated from mypyvy.
##
## ./src/mypyvy.py typecheck --print-program=fly examples/fol/firewall.pyv

# sorts:
sort node

# constants:


# functions:


# relations:
immutable internal(node): bool
mutable sent(node, node): bool
mutable allowed_in(node): bool

# init:
assume (forall S:node, D:node. !sent(S, D)) & (forall N:node. !allowed_in(N))

# transitions:
assume always (exists src:node, dst:node. internal(src) & !internal(dst) & (forall S:node, D:node. (sent(S, D))' <-> sent(S, D) | S = src & D = dst) & (forall N:node. (allowed_in(N))' <-> allowed_in(N) | N = dst)) | (exists src:node, dst:node. !internal(src) & internal(dst) & allowed_in(src) & (forall S:node, D:node. (sent(S, D))' <-> sent(S, D) | S = src & D = dst) & (forall x0:node. (allowed_in(x0))' = allowed_in(x0)))

# safety:
assert always (forall S:node, D:node. sent(S, D) & internal(D) -> (exists I:node. internal(I) & sent(I, S)))
proof {
    invariant forall S:node, D:node. sent(S, D) & internal(D) -> (exists I:node. internal(I) & sent(I, S))
    invariant forall D:node. allowed_in(D) -> (exists I:node. internal(I) & sent(I, D))
}
